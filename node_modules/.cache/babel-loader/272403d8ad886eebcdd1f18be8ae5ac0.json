{"ast":null,"code":"var _jsxFileName = \"/Users/ethan/Files/Programming/Projects2021/sorting-visualizer/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport { Tabs, Tab } from '@material-ui/core';\nimport { useState } from 'react';\nimport SortBox from './SortBox';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [algSel, setAlgSel] = useState(0);\n  const [algName, setAlgName] = useState(\"Bubble Sort\");\n  const [numElements, setNumElements] = useState(30);\n  const [array, setArray] = useState(genArray(numElements));\n  const [comparisons, setComparisons] = useState(0);\n  const [sorting, setSorting] = useState(false);\n  const [runtime, setRuntime] = useState(0);\n\n  const handleChange = (e, v) => {\n    setAlgSel(v);\n\n    switch (v) {\n      case 0:\n        setAlgName(\"Bubble Sort\");\n        break;\n\n      case 1:\n        setAlgName(\"Selection Sort\");\n        break;\n\n      case 2:\n        setAlgName(\"Insertion Sort\");\n        break;\n\n      case 3:\n        setAlgName(\"Merge Sort\");\n        break;\n\n      case 4:\n        setAlgName(\"QuickSort\");\n        break;\n\n      default:\n        setAlgName(\"Bubble Sort\");\n    }\n  };\n\n  const reset = () => {\n    setArray(genArray(numElements));\n    setComparisons(0);\n    setRuntime(0);\n  };\n\n  const sort = num => {\n    if (!sorting) {\n      setSorting(true);\n      const start = Date.now();\n      let choice;\n\n      switch (num) {\n        case 0:\n          choice = bubbleSort;\n          break;\n\n        case 1:\n          choice = selectionSort;\n          break;\n\n        case 2:\n          choice = insertionSort;\n          break;\n\n        case 3:\n          choice = mergeSort;\n          break;\n\n        case 4:\n          choice = QuickSort;\n          break;\n\n        default:\n          choice = bubbleSort;\n      }\n\n      const alg = choice(array);\n      const algInt = setInterval(() => {\n        const time = Date.now() - start;\n        setRuntime((time / 1000).toFixed(3));\n        const next = alg.next();\n\n        if (next.done) {\n          setSorting(false);\n          clearInterval(algInt);\n        } else {\n          setComparisons(c => c + 1);\n          setArray([...next.value]);\n        }\n      }, 5);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Sorting Algorithm Visualizer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Tabs, {\n      centered: true,\n      value: algSel,\n      onChange: handleChange,\n      indicatorColor: \"primary\",\n      textColor: \"primary\",\n      variant: \"scrollable\",\n      scrollButtons: \"auto\",\n      children: [/*#__PURE__*/_jsxDEV(Tab, {\n        label: \"Bubble Sort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Tab, {\n        label: \"Selection Sort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Tab, {\n        label: \"Insertion Sort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Tab, {\n        label: \"Merge Sort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Tab, {\n        label: \"QuickSort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text\",\n      children: () => {\n        switch (algSel) {\n          case 0:\n            return /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n                children: \"Bubble Sort\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 110,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n                children: \"Time Complexity: \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 111,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true);\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(SortBox, {\n      sort: sort,\n      array: array,\n      algSelected: algSel,\n      algName: algName,\n      runtime: runtime,\n      comparisons: comparisons,\n      reset: reset,\n      numElements: numElements,\n      setNumElements: setNumElements\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"DK5Z5BYLc/2JPb9c7py78hcXa88=\");\n\n_c = App;\n\nfunction genArray(n) {\n  let ret = [];\n\n  for (let i = 0; i < n; i++) {\n    ret[i] = i * (150 / 30);\n  }\n\n  return shuffle(ret);\n}\n\nfunction shuffle(array) {\n  var currentIndex = array.length,\n      randomIndex; // While there remain elements to shuffle...\n\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex--; // And swap it with the current element.\n\n    [array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]];\n  }\n\n  return array;\n}\n\nfunction* bubbleSort(arr) {\n  let i, j;\n  let array = [...arr];\n\n  for (i = 0; i < array.length - 1; i++) {\n    for (j = 0; j < array.length - i - 1; j++) {\n      if (array[j] > array[j + 1]) {\n        let temp = array[j];\n        array[j] = array[j + 1];\n        array[j + 1] = temp;\n      }\n\n      yield array;\n    }\n  }\n}\n\nfunction* insertionSort(a) {\n  let inputArr = [...a];\n  let n = inputArr.length;\n\n  for (let i = 1; i < n; i++) {\n    // Choosing the first element in our unsorted subarray\n    let current = inputArr[i]; // The last element of our sorted subarray\n\n    let j = i - 1;\n\n    while (j > -1 && current < inputArr[j]) {\n      inputArr[j + 1] = inputArr[j];\n      yield inputArr;\n      j--;\n    }\n\n    inputArr[j + 1] = current;\n  }\n\n  yield inputArr;\n}\n\nfunction* selectionSort(a) {\n  let arr = [...a];\n  let i, j, min_idx; // One by one move boundary of unsorted subarray\n\n  for (i = 0; i < arr.length - 1; i++) {\n    // Find the minimum element in unsorted array\n    min_idx = i;\n\n    for (j = i + 1; j < arr.length; j++) {\n      if (arr[j] < arr[min_idx]) {\n        min_idx = j;\n      }\n\n      yield arr;\n    } // Swap the found minimum element with the first element\n\n\n    let temp = arr[min_idx];\n    arr[min_idx] = arr[i];\n    arr[i] = temp;\n  }\n\n  yield arr;\n}\n\nfunction* mergeSort(arr) {\n  //Create two arrays for sorting\n  let sorted = Array.from(arr);\n  let n = sorted.length;\n  let buffer = new Array(n);\n\n  for (let size = 1; size < n; size *= 2) {\n    for (let leftStart = 0; leftStart < n; leftStart += 2 * size) {\n      //Get the two sub arrays\n      let left = leftStart,\n          right = Math.min(left + size, n),\n          leftLimit = right,\n          rightLimit = Math.min(right + size, n); //Merge the sub arrays\n\n      let i = left;\n\n      while (left < leftLimit && right < rightLimit) {\n        if (sorted[left] <= sorted[right]) {\n          buffer[i++] = sorted[left++];\n        } else {\n          buffer[i++] = sorted[right++];\n        }\n\n        yield [...buffer, ...sorted.slice(buffer.length)];\n      } //If there are elements in the left sub arrray then add it to the result\n\n\n      while (left < leftLimit) {\n        buffer[i++] = sorted[left++];\n        yield [...buffer, ...sorted.slice(buffer.length)];\n      } //If there are elements in the right sub array then add it to the result\n\n\n      while (right < rightLimit) {\n        buffer[i++] = sorted[right++];\n        yield [...buffer, ...sorted.slice(buffer.length)];\n      }\n    } //Swap the sorted sub array and merge them\n\n\n    let temp = sorted;\n    sorted = buffer;\n    buffer = temp;\n  }\n\n  yield sorted;\n}\n\nfunction* QuickSort(a) {\n  let arr = [...a]; //Stack for storing start and end index\n\n  let stack = []; //Get the start and end index\n\n  let start = 0;\n  let end = arr.length - 1; //Push start and end index in the stack\n\n  stack.push({\n    x: start,\n    y: end\n  }); //Iterate the stack\n\n  while (stack.length) {\n    //Get the start and end from the stack\n    const {\n      x,\n      y\n    } = stack.shift(); //Partition the array along the pivot\n\n    let pivot = arr[y];\n    let i = x; //Partition the array into two parts using the pivot\n\n    for (let j = x; j < y; j++) {\n      if (arr[j] <= pivot) {\n        const temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n      }\n\n      yield arr;\n    }\n\n    const temp = arr[i];\n    arr[i] = arr[y];\n    arr[y] = temp;\n    const PI = i; //Push sub array with less elements than pivot into the stack\n\n    if (PI - 1 > x) {\n      stack.push({\n        x: x,\n        y: PI - 1\n      });\n    } //Push sub array with greater elements than pivot into the stack\n\n\n    if (PI + 1 < y) {\n      stack.push({\n        x: PI + 1,\n        y: y\n      });\n    }\n  }\n\n  yield arr;\n}\n\n_c2 = QuickSort;\nexport default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"QuickSort\");","map":{"version":3,"sources":["/Users/ethan/Files/Programming/Projects2021/sorting-visualizer/src/App.js"],"names":["Tabs","Tab","useState","SortBox","App","algSel","setAlgSel","algName","setAlgName","numElements","setNumElements","array","setArray","genArray","comparisons","setComparisons","sorting","setSorting","runtime","setRuntime","handleChange","e","v","reset","sort","num","start","Date","now","choice","bubbleSort","selectionSort","insertionSort","mergeSort","QuickSort","alg","algInt","setInterval","time","toFixed","next","done","clearInterval","c","value","n","ret","i","shuffle","currentIndex","length","randomIndex","Math","floor","random","arr","j","temp","a","inputArr","current","min_idx","sorted","Array","from","buffer","size","leftStart","left","right","min","leftLimit","rightLimit","slice","stack","end","push","x","y","shift","pivot","PI"],"mappings":"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","sourcesContent":["import './App.css'\nimport { Tabs, Tab } from '@material-ui/core'\nimport { useState } from 'react'\nimport SortBox from './SortBox'\n\nfunction App() {\n    const [algSel, setAlgSel] = useState(0);\n    const [algName, setAlgName] = useState(\"Bubble Sort\");\n    const [numElements, setNumElements] = useState(30);\n    const [array, setArray] = useState(genArray(numElements));\n    const [comparisons, setComparisons] = useState(0);\n    const [sorting, setSorting] = useState(false);\n    const [runtime, setRuntime] = useState(0)\n\n    const handleChange = (e, v) => {\n        setAlgSel(v);\n        switch(v){\n            case 0:\n                setAlgName(\"Bubble Sort\");\n                break;\n            case 1:\n                setAlgName(\"Selection Sort\");\n                break;\n            case 2:\n                setAlgName(\"Insertion Sort\");\n                break;\n            case 3:\n                setAlgName(\"Merge Sort\");\n                break;\n            case 4:\n                setAlgName(\"QuickSort\");\n                break;\n            default:\n                setAlgName(\"Bubble Sort\");\n        }\n    };\n\n    const reset = () => {\n        setArray(genArray(numElements));\n        setComparisons(0);\n        setRuntime(0);\n    }\n\n    const sort = (num) => {\n        if(!sorting){\n            setSorting(true);\n            const start = Date.now();\n            let choice;\n            switch(num){\n                case 0:\n                    choice = bubbleSort;\n                    break;\n                case 1:\n                    choice = selectionSort;\n                    break;\n                case 2:\n                    choice = insertionSort;\n                    break;\n                case 3:\n                    choice = mergeSort;\n                    break;\n                case 4:\n                    choice = QuickSort;\n                    break;\n                default:\n                    choice = bubbleSort;\n            }\n            const alg = choice(array);\n            const algInt = setInterval(() => {\n                const time = Date.now() - start;\n                setRuntime((time/1000).toFixed(3));\n                const next = alg.next();\n                if(next.done) {\n                    setSorting(false);\n                    clearInterval(algInt);\n                }\n                else {\n                    setComparisons(c=>c+1);\n                    setArray([...next.value]);\n                }\n            },5)\n        }\n    }\n\n    return (\n        <>\n            <div className=\"header\">\n                <h1>Sorting Algorithm Visualizer</h1>\n            </div>\n            <Tabs\n                    centered\n                    value={algSel}\n                    onChange={handleChange}\n                    indicatorColor=\"primary\"\n                    textColor=\"primary\"\n                    variant=\"scrollable\"\n                    scrollButtons=\"auto\">\n                    <Tab label=\"Bubble Sort\" />\n                    <Tab label=\"Selection Sort\" />\n                    <Tab label=\"Insertion Sort\" />\n                    <Tab label=\"Merge Sort\" />\n                    <Tab label=\"QuickSort\" />\n                </Tabs>\n            <div className=\"text\">\n                {() => {\n                    switch(algSel) {\n                        case 0:\n                            return(\n                                <>\n                                <h1>Bubble Sort</h1>\n                                <h2>Time Complexity: </h2>\n                                </>\n                            )\n                    }\n                }}\n            \n            </div>\n\n            <SortBox \n                sort={sort}\n                array={array} \n                algSelected={algSel}\n                algName={algName}\n                runtime={runtime}\n                comparisons={comparisons}\n                reset={reset}\n                numElements={numElements} \n                setNumElements={setNumElements} />\n        </>\n    )\n}\n\nfunction genArray(n) {\n    let ret = [];\n    for(let i = 0; i < n; i++) {\n        ret[i] = i*(150/30);\n    }\n    return(shuffle(ret));\n}\n\nfunction shuffle(array) {\n    var currentIndex = array.length,  randomIndex;\n  \n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n  \n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--;\n  \n      // And swap it with the current element.\n      [array[currentIndex], array[randomIndex]] = [\n        array[randomIndex], array[currentIndex]];\n    }\n  \n    return array;\n  }\n\n  function* bubbleSort(arr)\n  {\n    let i, j;\n    let array = [...arr];\n    for (i = 0; i < array.length-1; i++)\n    {\n        for (j = 0; j < array.length-i-1; j++)\n        {\n            if (array[j] > array[j+1])\n            {\n                let temp = array[j];\n                array[j] = array[j+1];\n                array[j+1] = temp;\n            }\n            yield array;\n        }\n    }\n}\n\nfunction* insertionSort(a) {\n    let inputArr = [...a];\n    let n = inputArr.length;\n        for (let i = 1; i < n; i++) {\n            // Choosing the first element in our unsorted subarray\n            let current = inputArr[i];\n            // The last element of our sorted subarray\n            let j = i-1; \n            while ((j > -1) && (current < inputArr[j])) {\n                inputArr[j+1] = inputArr[j];\n                yield inputArr;\n                j--;\n            }\n            inputArr[j+1] = current;\n        }\n    yield inputArr;\n}\n\nfunction* selectionSort(a)\n{\n    let arr = [...a];\n    let i, j, min_idx;\n \n    // One by one move boundary of unsorted subarray\n    for (i = 0; i < arr.length-1; i++)\n    {\n        // Find the minimum element in unsorted array\n        min_idx = i;\n        for (j = i + 1; j < arr.length; j++){\n            if (arr[j] < arr[min_idx]) {\n                min_idx = j;\n            }\n            yield arr;\n        }\n \n        // Swap the found minimum element with the first element\n        let temp = arr[min_idx];\n        arr[min_idx] = arr[i];\n        arr[i] = temp;\n    }\n    yield arr;\n}\n\n\n\nfunction* mergeSort(arr) {\n    //Create two arrays for sorting\n    let sorted = Array.from(arr);\n    let n = sorted.length;\n    let buffer = new Array(n);\n    \n    for (let size = 1; size < n; size *= 2) {\n      for (let leftStart = 0; leftStart < n; leftStart += 2*size) {\n        \n        //Get the two sub arrays\n        let left = leftStart,\n            right = Math.min(left + size, n),\n            leftLimit = right,\n            rightLimit = Math.min(right + size, n);\n        \n        //Merge the sub arrays\n        let i = left;\n        while (left < leftLimit && right < rightLimit) {\n            if (sorted[left] <= sorted[right]) {\n              buffer[i++] = sorted[left++];\n            } else {\n              buffer[i++] = sorted[right++];\n            }\n            yield [...buffer, ...sorted.slice(buffer.length)]\n          }\n        \n          //If there are elements in the left sub arrray then add it to the result\n          while (left < leftLimit) {\n            buffer[i++] = sorted[left++];\n            yield [...buffer, ...sorted.slice(buffer.length)]\n          }\n        \n          //If there are elements in the right sub array then add it to the result\n          while (right < rightLimit) {\n            buffer[i++] = sorted[right++];\n            yield [...buffer, ...sorted.slice(buffer.length)]\n\n          }\n      }\n      \n      //Swap the sorted sub array and merge them\n      let temp = sorted;\n      sorted = buffer;\n      buffer = temp;\n    }\n    \n    yield sorted;\n  }\n\n  function* QuickSort(a){\n    let arr = [...a];\n    //Stack for storing start and end index\n    let stack = [];\n    \n    //Get the start and end index\n    let start = 0;\n    let end = arr.length - 1;\n    \n    //Push start and end index in the stack\n    stack.push({x: start, y: end});\n    \n    //Iterate the stack\n    while(stack.length){\n      //Get the start and end from the stack\n      const { x, y } = stack.shift();\n      \n      //Partition the array along the pivot\n      let pivot = arr[y];\n        let i = x;\n        \n        //Partition the array into two parts using the pivot\n        for(let j = x; j < y; j++){\n            if(arr[j] <= pivot){      \n                const temp = arr[i]\n                arr[i] = arr[j]\n                arr[j] = temp;\n            i++;\n            }\n            yield arr;\n        }\n        const temp = arr[i]\n        arr[i] = arr[y]\n        arr[y] = temp;\n      const PI = i;\n      \n      //Push sub array with less elements than pivot into the stack\n      if(PI - 1 > x){\n        stack.push({x: x, y: PI - 1});\n      }\n      \n      //Push sub array with greater elements than pivot into the stack\n      if(PI + 1 < y){\n        stack.push({x: PI + 1, y: y});\n      }\n    }\n    yield arr;\n  }\n\nexport default App;"]},"metadata":{},"sourceType":"module"}