{"ast":null,"code":"var _jsxFileName = \"/Users/ethan/Files/Programming/Projects2021/sorting-visualizer/src/App.js\",\n    _s = $RefreshSig$();\n\nimport Element from './Element';\nimport ElementCont from './ElementCont';\nimport { Container, Button } from '@material-ui/core';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [list, setList] = useState(genArray(30));\n  const [comparisons, setComparisons] = useState(0);\n\n  function swap(i, j) {\n    console.log(list);\n    let newArr = list;\n    const temp = list[i];\n    newArr[i] = list[j];\n    newArr[j] = temp;\n    setList(newArr);\n    setComparisons(comparisons + 1);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(ElementCont, {\n      comparisons: comparisons,\n      title: \"Bubble Sort\",\n      children: list.map((x, i) => {\n        return /*#__PURE__*/_jsxDEV(Element, {\n          height: x\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 32\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      title: \"Test\",\n      onClick: () => {\n        swap(0, 1);\n      },\n      children: \"Test\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 9\n  }, this);\n}\n\n_s(App, \"cXOXtLKSmpzZD9aiMzvV2QAWHPA=\");\n\n_c = App;\n\nfunction genArray(n) {\n  let ret = [];\n\n  for (let i = 0; i < n; i++) {\n    ret[i] = i * (150 / 30);\n  }\n\n  return shuffle(ret);\n}\n\nfunction shuffle(array) {\n  var currentIndex = array.length,\n      randomIndex; // While there remain elements to shuffle...\n\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex--; // And swap it with the current element.\n\n    [array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]];\n  }\n\n  return array;\n}\n\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/ethan/Files/Programming/Projects2021/sorting-visualizer/src/App.js"],"names":["Element","ElementCont","Container","Button","useState","App","list","setList","genArray","comparisons","setComparisons","swap","i","j","console","log","newArr","temp","map","x","n","ret","shuffle","array","currentIndex","length","randomIndex","Math","floor","random"],"mappings":";;;AAAA,OAAOA,OAAP,MAAoB,WAApB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,SAASC,SAAT,EAAoBC,MAApB,QAAkC,mBAAlC;AACA,SAASC,QAAT,QAAyB,OAAzB;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACX,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBH,QAAQ,CAACI,QAAQ,CAAC,EAAD,CAAT,CAAhC;AACA,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCN,QAAQ,CAAC,CAAD,CAA9C;;AAEA,WAASO,IAAT,CAAcC,CAAd,EAAgBC,CAAhB,EAAmB;AACfC,IAAAA,OAAO,CAACC,GAAR,CAAYT,IAAZ;AACA,QAAIU,MAAM,GAAGV,IAAb;AACA,UAAMW,IAAI,GAAGX,IAAI,CAACM,CAAD,CAAjB;AACAI,IAAAA,MAAM,CAACJ,CAAD,CAAN,GAAYN,IAAI,CAACO,CAAD,CAAhB;AACAG,IAAAA,MAAM,CAACH,CAAD,CAAN,GAAYI,IAAZ;AACAV,IAAAA,OAAO,CAACS,MAAD,CAAP;AACAN,IAAAA,cAAc,CAACD,WAAW,GAAC,CAAb,CAAd;AAEH;;AAED,sBACI,QAAC,SAAD;AAAA,4BACI,QAAC,WAAD;AAAa,MAAA,WAAW,EAAEA,WAA1B;AAAuC,MAAA,KAAK,EAAC,aAA7C;AAAA,gBAEQH,IAAI,CAACY,GAAL,CAAS,CAACC,CAAD,EAAGP,CAAH,KAAO;AACZ,4BAAO,QAAC,OAAD;AAAiB,UAAA,MAAM,EAAEO;AAAzB,WAAcP,CAAd;AAAA;AAAA;AAAA;AAAA,gBAAP;AACH,OAFD;AAFR;AAAA;AAAA;AAAA;AAAA,YADJ,eAQI,QAAC,MAAD;AAAQ,MAAA,KAAK,EAAC,MAAd;AAAqB,MAAA,OAAO,EAAE,MAAI;AAACD,QAAAA,IAAI,CAAC,CAAD,EAAG,CAAH,CAAJ;AAAU,OAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YARJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAYH;;GA3BQN,G;;KAAAA,G;;AA6BT,SAASG,QAAT,CAAkBY,CAAlB,EAAqB;AACjB,MAAIC,GAAG,GAAG,EAAV;;AACA,OAAI,IAAIT,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGQ,CAAnB,EAAsBR,CAAC,EAAvB,EAA2B;AACvBS,IAAAA,GAAG,CAACT,CAAD,CAAH,GAASA,CAAC,IAAE,MAAI,EAAN,CAAV;AACH;;AACD,SAAOU,OAAO,CAACD,GAAD,CAAd;AACH;;AAED,SAASC,OAAT,CAAiBC,KAAjB,EAAwB;AACpB,MAAIC,YAAY,GAAGD,KAAK,CAACE,MAAzB;AAAA,MAAkCC,WAAlC,CADoB,CAGpB;;AACA,SAAO,MAAMF,YAAb,EAA2B;AAEzB;AACAE,IAAAA,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBL,YAA3B,CAAd;AACAA,IAAAA,YAAY,GAJa,CAMzB;;AACA,KAACD,KAAK,CAACC,YAAD,CAAN,EAAsBD,KAAK,CAACG,WAAD,CAA3B,IAA4C,CAC1CH,KAAK,CAACG,WAAD,CADqC,EACtBH,KAAK,CAACC,YAAD,CADiB,CAA5C;AAED;;AAED,SAAOD,KAAP;AACD;;AAEH,eAAelB,GAAf","sourcesContent":["import Element from './Element'\nimport ElementCont from './ElementCont'\nimport { Container, Button } from '@material-ui/core'\nimport { useState } from 'react'\n\nfunction App() {\n    const [list, setList] = useState(genArray(30));\n    const [comparisons, setComparisons] = useState(0);\n\n    function swap(i,j) {\n        console.log(list);\n        let newArr = list;\n        const temp = list[i];\n        newArr[i] = list[j];\n        newArr[j] = temp;\n        setList(newArr);\n        setComparisons(comparisons+1);\n\n    }\n\n    return (\n        <Container>\n            <ElementCont comparisons={comparisons} title=\"Bubble Sort\">\n                {\n                    list.map((x,i)=>{\n                        return(<Element key={i} height={x}></Element>)\n                    })\n                }\n            </ElementCont>\n            <Button title=\"Test\" onClick={()=>{swap(0,1)}}>Test</Button>\n        </Container>\n    )\n}\n\nfunction genArray(n) {\n    let ret = [];\n    for(let i = 0; i < n; i++) {\n        ret[i] = i*(150/30);\n    }\n    return(shuffle(ret));\n}\n\nfunction shuffle(array) {\n    var currentIndex = array.length,  randomIndex;\n  \n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n  \n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--;\n  \n      // And swap it with the current element.\n      [array[currentIndex], array[randomIndex]] = [\n        array[randomIndex], array[currentIndex]];\n    }\n  \n    return array;\n  }\n\nexport default App;"]},"metadata":{},"sourceType":"module"}