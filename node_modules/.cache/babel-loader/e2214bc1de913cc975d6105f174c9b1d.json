{"ast":null,"code":"import { Button } from '@material-ui/core';\nimport { useState } from 'react';\n\nfunction App() {\n  return null;\n}\n\n_c = App;\n\nfunction genArray(n) {\n  let ret = [];\n\n  for (let i = 0; i < n; i++) {\n    ret[i] = i * (150 / 30);\n  }\n\n  return shuffle(ret);\n}\n\nfunction shuffle(array) {\n  var currentIndex = array.length,\n      randomIndex; // While there remain elements to shuffle...\n\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex--; // And swap it with the current element.\n\n    [array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]];\n  }\n\n  return array;\n}\n\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/ethan/Files/Programming/Projects2021/sorting-visualizer/src/App.js"],"names":["Button","useState","App","genArray","n","ret","i","shuffle","array","currentIndex","length","randomIndex","Math","floor","random"],"mappings":"AAAA,SAASA,MAAT,QAAuB,mBAAvB;AACA,SAASC,QAAT,QAAyB,OAAzB;;AAEA,SAASC,GAAT,GAAe;AAGX,SACI,IADJ;AAGH;;KANQA,G;;AAQT,SAASC,QAAT,CAAkBC,CAAlB,EAAqB;AACjB,MAAIC,GAAG,GAAG,EAAV;;AACA,OAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGF,CAAnB,EAAsBE,CAAC,EAAvB,EAA2B;AACvBD,IAAAA,GAAG,CAACC,CAAD,CAAH,GAASA,CAAC,IAAE,MAAI,EAAN,CAAV;AACH;;AACD,SAAOC,OAAO,CAACF,GAAD,CAAd;AACH;;AAED,SAASE,OAAT,CAAiBC,KAAjB,EAAwB;AACpB,MAAIC,YAAY,GAAGD,KAAK,CAACE,MAAzB;AAAA,MAAkCC,WAAlC,CADoB,CAGpB;;AACA,SAAO,MAAMF,YAAb,EAA2B;AAEzB;AACAE,IAAAA,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBL,YAA3B,CAAd;AACAA,IAAAA,YAAY,GAJa,CAMzB;;AACA,KAACD,KAAK,CAACC,YAAD,CAAN,EAAsBD,KAAK,CAACG,WAAD,CAA3B,IAA4C,CAC1CH,KAAK,CAACG,WAAD,CADqC,EACtBH,KAAK,CAACC,YAAD,CADiB,CAA5C;AAED;;AAED,SAAOD,KAAP;AACD;;AAEH,eAAeN,GAAf","sourcesContent":["import { Button } from '@material-ui/core'\nimport { useState } from 'react'\n\nfunction App() {\n    \n\n    return (\n        null\n    )\n}\n\nfunction genArray(n) {\n    let ret = [];\n    for(let i = 0; i < n; i++) {\n        ret[i] = i*(150/30);\n    }\n    return(shuffle(ret));\n}\n\nfunction shuffle(array) {\n    var currentIndex = array.length,  randomIndex;\n  \n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n  \n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--;\n  \n      // And swap it with the current element.\n      [array[currentIndex], array[randomIndex]] = [\n        array[randomIndex], array[currentIndex]];\n    }\n  \n    return array;\n  }\n\nexport default App;"]},"metadata":{},"sourceType":"module"}