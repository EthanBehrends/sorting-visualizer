{"ast":null,"code":"var _jsxFileName = \"/Users/ethan/Files/Programming/Projects2021/sorting-visualizer/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport { Button, Tabs, Tab } from '@material-ui/core';\nimport { useState } from 'react';\nimport SortBox from './SortBox';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [algSel, setAlgSel] = useState(0);\n  const [numElements, setNumElements] = useState(30);\n  const [array, setArray] = useState(genArray(numElements));\n  const [comparisons, setComparisons] = useState(0);\n  const [sorting, setSorting] = useState(false);\n\n  const handleChange = (e, v) => {\n    setAlgSel(v);\n  };\n\n  const sort = () => {\n    const alg = selectionSort(array);\n    const algInt = setInterval(() => {\n      const next = alg.next();\n\n      if (next.done) {\n        clearInterval(algInt);\n      } else {\n        setComparisons(c => c + 1);\n        setArray([...next.value]);\n      }\n    }, 5);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Sorting Algorithm Visualizer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Tabs, {\n      value: algSel,\n      onChange: handleChange,\n      indicatorColor: \"primary\",\n      textColor: \"primary\",\n      variant: \"scrollable\",\n      scrollButtons: \"auto\",\n      children: [/*#__PURE__*/_jsxDEV(Tab, {\n        label: \"Bubble Sort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Tab, {\n        label: \"Insertion Sort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Tab, {\n        label: \"Merge Sort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Tab, {\n        label: \"Quick Sort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(SortBox, {\n      sort: sort,\n      array: array,\n      setArray: setArray,\n      genArray: genArray,\n      comparisons: comparisons,\n      setComparisons: setComparisons,\n      numElements: numElements,\n      setNumElements: setNumElements\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"4XO3uMwLSVugquEhT2uy3OUlnns=\");\n\n_c = App;\n\nfunction genArray(n) {\n  let ret = [];\n\n  for (let i = 0; i < n; i++) {\n    ret[i] = i * (150 / 30);\n  }\n\n  return shuffle(ret);\n}\n\nfunction shuffle(array) {\n  var currentIndex = array.length,\n      randomIndex; // While there remain elements to shuffle...\n\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex--; // And swap it with the current element.\n\n    [array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]];\n  }\n\n  return array;\n}\n\nfunction* bubbleSort(arr) {\n  let i, j;\n  let array = [...arr];\n\n  for (i = 0; i < array.length - 1; i++) {\n    for (j = 0; j < array.length - i - 1; j++) {\n      if (array[j] > array[j + 1]) {\n        let temp = array[j];\n        array[j] = array[j + 1];\n        array[j + 1] = temp;\n      }\n\n      yield array;\n    }\n  }\n}\n\nfunction* insertionSort(a) {\n  let inputArr = [...a];\n  let n = inputArr.length;\n\n  for (let i = 1; i < n; i++) {\n    // Choosing the first element in our unsorted subarray\n    let current = inputArr[i]; // The last element of our sorted subarray\n\n    let j = i - 1;\n\n    while (j > -1 && current < inputArr[j]) {\n      inputArr[j + 1] = inputArr[j];\n      yield inputArr;\n      j--;\n    }\n\n    inputArr[j + 1] = current;\n  }\n\n  yield inputArr;\n}\n\nfunction* selectionSort(a) {\n  let arr = [...a];\n  let i, j, min_idx; // One by one move boundary of unsorted subarray\n\n  for (i = 0; i < arr.length - 1; i++) {\n    // Find the minimum element in unsorted array\n    min_idx = i;\n\n    for (j = i + 1; j < arr.length; j++) {\n      if (arr[j] < arr[min_idx]) {\n        min_idx = j;\n      }\n\n      yield arr;\n    } // Swap the found minimum element with the first element\n\n\n    let temp = arr[min_idx];\n    arr[min_idx] = arr[i];\n    arr[i] = temp;\n  }\n\n  yield arr;\n}\n\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/ethan/Files/Programming/Projects2021/sorting-visualizer/src/App.js"],"names":["Button","Tabs","Tab","useState","SortBox","App","algSel","setAlgSel","numElements","setNumElements","array","setArray","genArray","comparisons","setComparisons","sorting","setSorting","handleChange","e","v","sort","alg","selectionSort","algInt","setInterval","next","done","clearInterval","c","value","n","ret","i","shuffle","currentIndex","length","randomIndex","Math","floor","random","bubbleSort","arr","j","temp","insertionSort","a","inputArr","current","min_idx"],"mappings":"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","sourcesContent":["import './App.css'\nimport { Button, Tabs, Tab } from '@material-ui/core'\nimport { useState } from 'react'\nimport SortBox from './SortBox'\n\nfunction App() {\n    const [algSel, setAlgSel] = useState(0);\n    const [numElements, setNumElements] = useState(30);\n    const [array, setArray] = useState(genArray(numElements));\n    const [comparisons, setComparisons] = useState(0);\n    const [sorting, setSorting] = useState(false);\n\n    const handleChange = (e, v) => {\n        setAlgSel(v);\n    };\n\n    const sort = () => {\n        const alg = selectionSort(array);\n        const algInt = setInterval(() => {\n            const next = alg.next();\n            if(next.done) {\n                clearInterval(algInt);\n            }\n            else {\n                setComparisons(c=>c+1);\n                setArray([...next.value]);\n            }\n        },5)\n    }\n\n    return (\n        <>\n            <div className=\"header\">\n                <h1>Sorting Algorithm Visualizer</h1>\n            </div>\n            <Tabs\n                    value={algSel}\n                    onChange={handleChange}\n                    indicatorColor=\"primary\"\n                    textColor=\"primary\"\n                    variant=\"scrollable\"\n                    scrollButtons=\"auto\">\n                    <Tab label=\"Bubble Sort\" />\n                    <Tab label=\"Insertion Sort\" />\n                    <Tab label=\"Merge Sort\" />\n                    <Tab label=\"Quick Sort\" />\n                </Tabs>\n            <SortBox \n                sort={sort}\n                array={array} \n                setArray={setArray} \n                genArray={genArray} \n                comparisons={comparisons}\n                setComparisons={setComparisons}\n                numElements={numElements} \n                setNumElements={setNumElements} />\n        </>\n    )\n}\n\nfunction genArray(n) {\n    let ret = [];\n    for(let i = 0; i < n; i++) {\n        ret[i] = i*(150/30);\n    }\n    return(shuffle(ret));\n}\n\nfunction shuffle(array) {\n    var currentIndex = array.length,  randomIndex;\n  \n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n  \n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--;\n  \n      // And swap it with the current element.\n      [array[currentIndex], array[randomIndex]] = [\n        array[randomIndex], array[currentIndex]];\n    }\n  \n    return array;\n  }\n\n  function* bubbleSort(arr)\n  {\n    let i, j;\n    let array = [...arr];\n    for (i = 0; i < array.length-1; i++)\n    {\n        for (j = 0; j < array.length-i-1; j++)\n        {\n            if (array[j] > array[j+1])\n            {\n                let temp = array[j];\n                array[j] = array[j+1];\n                array[j+1] = temp;\n            }\n            yield array;\n        }\n    }\n}\n\nfunction* insertionSort(a) {\n    let inputArr = [...a];\n    let n = inputArr.length;\n        for (let i = 1; i < n; i++) {\n            // Choosing the first element in our unsorted subarray\n            let current = inputArr[i];\n            // The last element of our sorted subarray\n            let j = i-1; \n            while ((j > -1) && (current < inputArr[j])) {\n                inputArr[j+1] = inputArr[j];\n                yield inputArr;\n                j--;\n            }\n            inputArr[j+1] = current;\n        }\n    yield inputArr;\n}\n\nfunction* selectionSort(a)\n{\n    let arr = [...a];\n    let i, j, min_idx;\n \n    // One by one move boundary of unsorted subarray\n    for (i = 0; i < arr.length-1; i++)\n    {\n        // Find the minimum element in unsorted array\n        min_idx = i;\n        for (j = i + 1; j < arr.length; j++){\n            if (arr[j] < arr[min_idx]) {\n                min_idx = j;\n            }\n            yield arr;\n        }\n \n        // Swap the found minimum element with the first element\n        let temp = arr[min_idx];\n        arr[min_idx] = arr[i];\n        arr[i] = temp;\n    }\n    yield arr;\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}