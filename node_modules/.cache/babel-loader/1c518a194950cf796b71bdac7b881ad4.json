{"ast":null,"code":"var _jsxFileName = \"/Users/ethan/Files/Programming/Projects2021/sorting-visualizer/src/App.js\",\n    _s = $RefreshSig$();\n\nimport Element from './Element';\nimport ElementCont from './ElementCont';\nimport { Container, Button } from '@material-ui/core';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [list, setList] = useState(genArray(30));\n  const [comparisons, setComparisons] = useState(0);\n\n  function swap(i, j) {\n    let newArr = list;\n    const temp = list[i];\n    newArr[i] = list[j];\n    newArr[j] = temp;\n    setList(newArr);\n    setComparisons(comparisons + 1);\n  }\n\n  function sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  async function bubbleSort() {\n    var i, j;\n\n    for (i = 0; i < list.length - 1; i++) {\n      for (j = 0; j < list.length - i - 1; j++) {\n        await sleep(200);\n\n        if (list[j] > list[j + 1]) {\n          swap(j, j + 1);\n        }\n      }\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(ElementCont, {\n      comparisons: comparisons,\n      title: \"Bubble Sort\",\n      children: list.map((x, i) => {\n        return /*#__PURE__*/_jsxDEV(Element, {\n          height: x\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 32\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      title: \"Test\",\n      onClick: () => {\n        bubbleSort();\n      },\n      children: \"Test\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n}\n\n_s(App, \"cXOXtLKSmpzZD9aiMzvV2QAWHPA=\");\n\n_c = App;\n\nfunction genArray(n) {\n  let ret = [];\n\n  for (let i = 0; i < n; i++) {\n    ret[i] = i * (150 / 30);\n  }\n\n  return shuffle(ret);\n}\n\nfunction shuffle(array) {\n  var currentIndex = array.length,\n      randomIndex; // While there remain elements to shuffle...\n\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex--; // And swap it with the current element.\n\n    [array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]];\n  }\n\n  return array;\n}\n\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/ethan/Files/Programming/Projects2021/sorting-visualizer/src/App.js"],"names":["Element","ElementCont","Container","Button","useState","App","list","setList","genArray","comparisons","setComparisons","swap","i","j","newArr","temp","sleep","ms","Promise","resolve","setTimeout","bubbleSort","length","map","x","n","ret","shuffle","array","currentIndex","randomIndex","Math","floor","random"],"mappings":"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","sourcesContent":["import Element from './Element'\nimport ElementCont from './ElementCont'\nimport { Container, Button } from '@material-ui/core'\nimport { useState } from 'react'\n\nfunction App() {\n    const [list, setList] = useState(genArray(30));\n    const [comparisons, setComparisons] = useState(0);\n\n    function swap(i,j) {\n        let newArr = list;\n        const temp = list[i];\n        newArr[i] = list[j];\n        newArr[j] = temp;\n        setList(newArr);\n        setComparisons(comparisons+1);\n\n    }\n\n    function sleep(ms) {\n        return new Promise(\n          resolve => setTimeout(resolve, ms)\n        );\n    }\n\n    async function bubbleSort() {\n        var i, j;\n        for (i = 0; i < list.length-1; i++) {\n            for (j = 0; j < list.length-i-1; j++) {\n                await sleep(200);\n\n                if (list[j] > list[j+1]){\n                    swap(j,j+1);\n                }\n            }\n        }\n    }\n\n    return (\n        <Container>\n            <ElementCont comparisons={comparisons} title=\"Bubble Sort\">\n                {\n                    list.map((x,i)=>{\n                        return(<Element key={i} height={x}></Element>)\n                    })\n                }\n            </ElementCont>\n            <Button title=\"Test\" onClick={()=>{bubbleSort()}}>Test</Button>\n        </Container>\n    )\n}\n\nfunction genArray(n) {\n    let ret = [];\n    for(let i = 0; i < n; i++) {\n        ret[i] = i*(150/30);\n    }\n    return(shuffle(ret));\n}\n\nfunction shuffle(array) {\n    var currentIndex = array.length,  randomIndex;\n  \n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n  \n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--;\n  \n      // And swap it with the current element.\n      [array[currentIndex], array[randomIndex]] = [\n        array[randomIndex], array[currentIndex]];\n    }\n  \n    return array;\n  }\n\nexport default App;"]},"metadata":{},"sourceType":"module"}